{"version":3,"file":"create-fulfillment.js","sourceRoot":"","sources":["../../../src/assemble/assemble/create-fulfillment.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAEnE,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAErE,OAAO,sBAAsB,CAAC;AAC9B,OAAO,wBAAwB,CAAC;AAChC,OAAO,wBAAwB,CAAC;AAGzB,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU;IAkB/C,kBAAkB;QAChB,OAAY,IAAI,CAAC,eAAe;YAC/B,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,WAAW,CAAC;IACpB,CAAC;IAQD,KAAK,CAAC,iBAAiB;QACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAAE,CAAC;QAE9F,MAAM,WAAW,GAAgB;YAC7B,eAAe,EAAE,IAAI,CAAC,cAAc;YACpC,UAAU,EAAE,IAAI,CAAC,WAAY;YAC7B,YAAY,EAAE,IAAI,CAAC,WAAW;YAC9B,UAAU,EAAE,IAAI,CAAC,WAAY;SAChC,CAAC;QAEF,MAAM,MAAM,GAAW,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YACtD,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,SAAS,EAAE,UAAU;YACrB,OAAO,EAAE,oBAAoB;YAC7B,OAAO,EAAE,WAAW;YACpB,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,qBAAqB,EAAE;YACxD,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,IAAI;YACb,MAAM,EAAE;gBACN,UAAU,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;aAC7C;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;oCAMqB,CAAC,CAAc,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,GAAI,CAAC,CAAC,MAAc,CAAC,KAAK,CAAC,CAAA,CAAE;;;mDAGpD,CAAC,CAAc,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,GAAI,CAAC,CAAC,MAAc,CAAC,KAAK,CAAC,CAAA,CAAE;;;;sBAIhG,CAAC,IAAI,CAAC,kBAAkB,EAAE;mBAC7B,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE;;WAEtC,CAAC;IACV,CAAC;CACF,CAAA;AA5EC;IADC,QAAQ,EAAE;yDACiB;AAE5B;IADC,QAAQ,EAAE;sDACc;AAGzB;IADC,KAAK,EAAE;0DACgC;AAGxC;IADC,KAAK,EAAE;sDACyB;AAGjC;IADG,KAAK,EAAE;uDAC4B;AAGtC;IADC,KAAK,EAAE;sDACyB;AAUjC;IADC,eAAe,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;uDACtB;AAG5B;IADC,eAAe,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC;kDAClB;AA7BhB,iBAAiB;IAD7B,aAAa,CAAC,oBAAoB,CAAC;GACvB,iBAAiB,CA8E7B;SA9EY,iBAAiB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { state, customElement, property } from 'lit/decorators.js';\nimport { InstalledCell, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';\nimport { contextProvided } from '@lit-labs/context';\nimport { appWebsocketContext, appInfoContext } from '../../contexts';\nimport { Fulfillment } from './fulfillment';\nimport '@material/mwc-button';\nimport '@material/mwc-checkbox';\nimport '@material/mwc-textarea';\n\n@customElement('create-fulfillment')\nexport class CreateFulfillment extends LitElement {\n  @property()\n  commitmentHash!: ActionHash;\n  @property()\n  promiseHash!: ActionHash;\n\n  @state()\n  _commitmentHash: ActionHash | undefined;\n  \n  @state()\n  _fullfilled: boolean | undefined;\n\n    @state()\n  _promiseHash: ActionHash  | undefined;\n  \n  @state()\n  _reflection: string  | undefined;\n  \n  isFulfillmentValid() {\n    return     \tthis._commitmentHash &&   \n    \tthis._fullfilled &&   \n    \tthis._promiseHash &&     \n    \tthis._reflection;\n  }\n\n  @contextProvided({ context: appWebsocketContext })\n  appWebsocket!: AppWebsocket;\n\n  @contextProvided({ context: appInfoContext })\n  appInfo!: InstalledAppInfo;\n\n  async createFulfillment() {\n    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === 'assemble')!;\n\n    const fulfillment: Fulfillment = { \n        commitment_hash: this.commitmentHash,\n        fullfilled: this._fullfilled!,\n        promise_hash: this.promiseHash,\n        reflection: this._reflection!,\n    };\n\n    const record: Record = await this.appWebsocket.callZome({\n      cap_secret: null,\n      cell_id: cellData.cell_id,\n      zome_name: 'assemble',\n      fn_name: 'create_fulfillment',\n      payload: fulfillment,\n      provenance: cellData.cell_id[1]\n    });\n\n    this.dispatchEvent(new CustomEvent('fulfillment-created', {\n      composed: true,\n      bubbles: true,\n      detail: {\n        actionHash: record.signed_action.hashed.hash\n      }\n    }));\n  }\n\n  render() {\n    return html`\n      <div style=\"display: flex; flex-direction: column\">\n        <span style=\"font-size: 18px\">Create Fulfillment</span>\n\n          <!-- TODO: implement the creation of commitment_hash -->\n          <mwc-formfield label=\"\">\n            <mwc-checkbox  @input=${(e: CustomEvent) => { this._fullfilled = (e.target as any).value;} }></mwc-checkbox>\n          </mwc-formfield>\n          <!-- TODO: implement the creation of promise_hash -->\n          <mwc-textarea outlined label=\"\" @input=${(e: CustomEvent) => { this._reflection = (e.target as any).value;} }></mwc-textarea>\n\n        <mwc-button \n          label=\"Create Fulfillment\"\n          .disabled=${!this.isFulfillmentValid()}\n          @click=${() => this.createFulfillment()}\n        ></mwc-button>\n    </div>`;\n  }\n}\n"]}