{"version":3,"file":"create-commitment.js","sourceRoot":"","sources":["../../../src/assemble/assemble/create-commitment.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAS,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAEnE,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAErE,OAAO,sBAAsB,CAAC;AAGvB,IAAM,gBAAgB,GAAtB,MAAM,gBAAiB,SAAQ,UAAU;IAI9C,iBAAiB;QACf,OAAY,IAAI,CAAC,SAAS,CAAE;IAC9B,CAAC;IAQD,KAAK,CAAC,gBAAgB;QACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAAE,CAAC;QAE9F,MAAM,UAAU,GAAe;YAC3B,UAAU,EAAE,IAAI,CAAC,SAAU;YAC7B,KAAK,EAAE,EAAE;SACV,CAAC;QAEF,MAAM,MAAM,GAAW,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YACtD,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,SAAS,EAAE,UAAU;YACrB,OAAO,EAAE,mBAAmB;YAC5B,OAAO,EAAE,UAAU;YACnB,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,oBAAoB,EAAE;YACvD,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,IAAI;YACb,MAAM,EAAE;gBACN,UAAU,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;aAC7C;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;;sBAQO,CAAC,IAAI,CAAC,iBAAiB,EAAE;mBAC5B,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE;;WAErC,CAAC;IACV,CAAC;CACF,CAAA;AApDC;IADC,QAAQ,EAAE;mDACY;AAOvB;IADC,eAAe,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;sDACtB;AAG5B;IADC,eAAe,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC;iDAClB;AAZhB,gBAAgB;IAD5B,aAAa,CAAC,mBAAmB,CAAC;GACtB,gBAAgB,CAsD5B;SAtDY,gBAAgB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { state, customElement, property } from 'lit/decorators.js';\nimport { InstalledCell, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';\nimport { contextProvided } from '@lit-labs/context';\nimport { appWebsocketContext, appInfoContext } from '../../contexts';\nimport { Commitment } from './commitment';\nimport '@material/mwc-button';\n\n@customElement('create-commitment')\nexport class CreateCommitment extends LitElement {\n  @property()\n  offerHash!: ActionHash;\n\n  isCommitmentValid() {\n    return     \tthis.offerHash ;\n  }\n\n  @contextProvided({ context: appWebsocketContext })\n  appWebsocket!: AppWebsocket;\n\n  @contextProvided({ context: appInfoContext })\n  appInfo!: InstalledAppInfo;\n\n  async createCommitment() {\n    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === 'assemble')!;\n\n    const commitment: Commitment = { \n        offer_hash: this.offerHash!,\n      slots: []\n    };\n\n    const record: Record = await this.appWebsocket.callZome({\n      cap_secret: null,\n      cell_id: cellData.cell_id,\n      zome_name: 'assemble',\n      fn_name: 'create_commitment',\n      payload: commitment,\n      provenance: cellData.cell_id[1]\n    });\n\n    this.dispatchEvent(new CustomEvent('commitment-created', {\n      composed: true,\n      bubbles: true,\n      detail: {\n        actionHash: record.signed_action.hashed.hash\n      }\n    }));\n  }\n\n  render() {\n    return html`\n      <div style=\"display: flex; flex-direction: column\">\n        <span style=\"font-size: 18px\">Create Commitment</span>\n\n          <!-- TODO: implement the creation of offer_hash -->\n\n        <mwc-button \n          label=\"Create Commitment\"\n          .disabled=${!this.isCommitmentValid()}\n          @click=${() => this.createCommitment()}\n        ></mwc-button>\n    </div>`;\n  }\n}\n"]}